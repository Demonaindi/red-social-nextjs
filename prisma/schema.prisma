generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String 
  name      String?
  username  String?  @unique
  image     String?
  posts     Post[]
  comments  Comment[]

  // Followers / Following
  followedBy Follows[] @relation("FollowedBy")
  following  Follows[] @relation("Following")

  Like Like[]
}

model Follows {
  id        String   @id @default(cuid())
  follower  User     @relation("Following", fields: [followerId], references: [id])
  followerId String

  following User     @relation("FollowedBy", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model PostImage {
  id       String @id @default(cuid())
  url      String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
}

model Post {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comment[]
  images    PostImage[] 
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // evita likes duplicados
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}
